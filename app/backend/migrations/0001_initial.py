# Generated by Django 4.2 on 2024-02-06 14:54

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Act',
            fields=[
                ('act_name', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Aktname')),
                ('person_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Personenzahl')),
                ('act_image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Bild')),
                ('music_sample', models.FileField(blank=True, null=True, upload_to='', verbose_name='Musikbeispiel')),
                ('diet', models.CharField(blank=True, max_length=100, verbose_name='Ernährung')),
                ('act_email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email')),
                ('act_phone', models.CharField(blank=True, max_length=15, verbose_name='Telefon')),
            ],
            options={
                'verbose_name': 'Akt',
                'verbose_name_plural': 'Akte',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('event_name', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='Veranstaltungsname')),
                ('event_type', models.CharField(choices=[('CI', 'Kino'), ('CO', 'Musik'), ('PL', 'Bühne'), ('PY', 'Party'), ('EX', 'Extra'), ('FV', 'Festival'), ('OT', 'Sonstiges')], default='OT', max_length=2, verbose_name='Veranstaltungsart')),
                ('event_description', models.TextField(blank=True, verbose_name='Beschreibung')),
                ('event_press', models.TextField(blank=True, verbose_name='Pressetext')),
                ('event_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='Einlassgebühr')),
                ('event_image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Bild')),
            ],
            options={
                'verbose_name': 'Veranstaltung',
                'verbose_name_plural': 'Veranstaltungen',
            },
        ),
        migrations.CreateModel(
            name='EventDay',
            fields=[
                ('event_day_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, null=True, verbose_name='Datum')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, unique=True, verbose_name='Veranstaltungsbeginn')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Veranstaltungsdauer')),
                ('admission_time', models.DateTimeField(blank=True, null=True, verbose_name='Einlassbeginn')),
                ('event_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.event')),
            ],
            options={
                'verbose_name': 'Veranstaltungstag',
                'verbose_name_plural': 'Veranstaltungstage',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('notification_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('AB', 'Aufgabenbenachrichtigung'), ('DB', 'Dienstbenachrichtigung'), ('BN', 'Benachrichtigung')], default='BN', max_length=2, verbose_name='Benachrichtigungsart')),
                ('comment', models.TextField(blank=True, verbose_name='Kommentar')),
                ('timer', models.PositiveIntegerField(verbose_name='Timer')),
            ],
            options={
                'verbose_name': 'Benachrichtigung',
                'verbose_name_plural': 'Benachrichtigungen',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('setting_name', models.CharField(primary_key=True, serialize=False, verbose_name='Einstellungsname')),
                ('setting_type', models.CharField(choices=[('NG', 'Benachrichtigungen allgmein'), ('NS', 'Bestimmte Benachrichtigung'), ('AP', 'Erscheinungsbild'), ('ST', 'Einstellung')], default='ST', max_length=2, verbose_name='Einstellungsart')),
                ('value_type', models.CharField(choices=[('BO', 'Bool'), ('IN', 'Integer'), ('EN', 'Eumeration')], default='BO', max_length=2, verbose_name='Datentyp')),
            ],
            options={
                'verbose_name': 'Einstellung',
                'verbose_name_plural': 'Einstellungen',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('task_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_type', models.CharField(choices=[('AD', 'Einlass'), ('TT', 'Tontechnik'), ('LT', 'Lichttechnik'), ('KÜ', 'Küche'), ('OT', 'Sonstiges')], default='OT', max_length=2, verbose_name='Aufgabenart')),
                ('team_restriction', models.CharField(choices=[('TT', 'Tontechnik'), ('LT', 'Lichttechnik'), ('VW', 'Verwaltung'), ('NO', 'Ohne')], default='NO', max_length=2, verbose_name='Teambindung')),
                ('urgency', models.CharField(choices=[('UR', 'Dringend'), ('IM', 'Wichtig'), ('MD', 'Mittel'), ('LO', 'Niedrig')], default='MD', max_length=2, verbose_name='Dringlichkeit')),
                ('state', models.CharField(choices=[('FR', 'Offen'), ('TK', 'Übernommen'), ('MB', 'Vielleicht'), ('DN', 'Erledigt')], default='FR', max_length=2, verbose_name='Status')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Beginn')),
                ('finish_time', models.DateTimeField(blank=True, null=True, verbose_name='Ende')),
                ('comment', models.TextField(blank=True, verbose_name='Kommentar')),
                ('event_day_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.eventday')),
            ],
            options={
                'verbose_name': 'Aufgabe',
                'verbose_name_plural': 'Aufgaben',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('team_name', models.CharField(max_length=40, primary_key=True, serialize=False, verbose_name='Teamname')),
            ],
            options={
                'verbose_name': 'Team',
                'verbose_name_plural': 'Teams',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('username', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='Anmeldename')),
                ('surname', models.CharField(blank=True, max_length=40, verbose_name='Vorname')),
                ('last_name', models.CharField(blank=True, max_length=40, verbose_name='Nachname')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Telefon')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Personen',
            },
        ),
        migrations.CreateModel(
            name='UserSettingValue',
            fields=[
                ('user_setting_value_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('setting_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.setting')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.user')),
            ],
            options={
                'verbose_name': 'Einstellungswert',
                'verbose_name_plural': 'Einstellungswerte',
            },
        ),
        migrations.CreateModel(
            name='Adress',
            fields=[
                ('username', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='backend.user')),
                ('street', models.CharField(blank=True, max_length=40, verbose_name='Straße')),
                ('house_number', models.CharField(blank=True, max_length=40, verbose_name='Hausnummer')),
                ('postal_code', models.CharField(blank=True, max_length=40, verbose_name='PLZ')),
                ('country', models.CharField(blank=True, max_length=40, verbose_name='Land')),
            ],
            options={
                'verbose_name': 'Adresse',
                'verbose_name_plural': 'Adressen',
            },
        ),
        migrations.CreateModel(
            name='BoolValue',
            fields=[
                ('usersettingvalue_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.usersettingvalue')),
                ('bool_value', models.BooleanField()),
            ],
            options={
                'verbose_name': 'Boolwert',
                'verbose_name_plural': 'Boolwerte',
            },
            bases=('backend.usersettingvalue',),
        ),
        migrations.CreateModel(
            name='EnumValue',
            fields=[
                ('usersettingvalue_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.usersettingvalue')),
            ],
            options={
                'verbose_name': 'Enumwert',
                'verbose_name_plural': 'Enumwerte',
            },
            bases=('backend.usersettingvalue',),
        ),
        migrations.CreateModel(
            name='IntValue',
            fields=[
                ('usersettingvalue_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.usersettingvalue')),
                ('int_value', models.BigIntegerField()),
            ],
            options={
                'verbose_name': 'Integerwert',
                'verbose_name_plural': 'Integerwerte',
            },
            bases=('backend.usersettingvalue',),
        ),
        migrations.CreateModel(
            name='UTMember',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.user')),
                ('member_number', models.PositiveIntegerField(verbose_name='Mitgliedsnummer')),
            ],
            options={
                'verbose_name': 'Mitglied',
                'verbose_name_plural': 'Mitglieder',
            },
            bases=('backend.user',),
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.user')),
                ('volunteering_count', models.PositiveIntegerField(blank=True, null=True, verbose_name='Zähler')),
            ],
            options={
                'verbose_name': 'Helfer:in',
                'verbose_name_plural': 'Helfer:innen',
            },
            bases=('backend.user',),
        ),
        migrations.CreateModel(
            name='Volunteering',
            fields=[
                ('volunteering_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('confirmation_type', models.CharField(choices=[('NO', 'Nicht'), ('CE', 'Sicher'), ('MB', 'Vielleicht')], default='NO', max_length=15, verbose_name='Art der Zusage')),
                ('task_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.task')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.user')),
            ],
            options={
                'verbose_name': 'Dienst',
                'verbose_name_plural': 'Dienste',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('team_member_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('team_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.team')),
                ('username', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.user')),
            ],
            options={
                'verbose_name': 'Teammitglied',
                'verbose_name_plural': 'Teammitglieder',
            },
        ),
        migrations.CreateModel(
            name='EventAct',
            fields=[
                ('event_act_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('act_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.act')),
                ('event_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.eventday')),
            ],
            options={
                'verbose_name': 'Auftritt',
                'verbose_name_plural': 'Auftritte',
            },
        ),
        migrations.CreateModel(
            name='VolunteeringNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.notification')),
                ('volunteering_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.volunteering')),
            ],
            options={
                'verbose_name': 'Dienstbenachrichtigung',
                'verbose_name_plural': 'Dienstbenachrichtigungen',
            },
            bases=('backend.notification',),
        ),
        migrations.CreateModel(
            name='TaskNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backend.notification')),
                ('task_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.task')),
            ],
            options={
                'verbose_name': 'Aufgabenbenachrichtigung',
                'verbose_name_plural': 'Aufgabenbenachrichtigungen',
            },
            bases=('backend.notification',),
        ),
    ]
